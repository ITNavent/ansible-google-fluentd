# Master configuration file for google-fluentd

# Include any configuration files in the config.d directory.
#
# An example "catch-all" configuration can be found at
# https://github.com/GoogleCloudPlatform/fluentd-catch-all-config
@include /etc/google-fluentd/config-active.d/*.conf
{% if google_fluent_custom_config_folder != '' %}
@include {{ google_fluent_custom_config_folder }}/*.conf
{% endif %}

# Prometheus monitoring.
<source>
  @type prometheus
  port 24231
</source>
<source>
  @type prometheus_monitor
</source>

{% if google_fluentd_journald_monitoring_services|length > 0 %}
# Add filter for journald services
<filter **>
  @type systemd_entry
  fields_lowercase true
  fields_strip_underscores true
</filter>
<filter **>
  @type record_transformer
  enable_ruby
  <record>
  {%- raw %}
    severity ${{"0" => "EMERGENCY", "1" => "ALERT", "2" => "CRITICAL", "3" => "ERROR", "4" => "WARNING", "5" => "NOTICE", "6" => "INFO", "7" => "DEBUG"}[record["priority"]]}
  {% endraw -%}

  </record>
</filter>
{% endif %}
# Do not collect fluentd's own logs to avoid infinite loops.
<match fluent.**>
  @type null
</match>

# Configure all sources to output to Google Cloud Logging
<match **>
  @type google_cloud
  {% if google_fluentd_not_gcp_vm %}
# Set parameters if we use not GCP VM
  project_id {{ google_fluentd_gcp_project_id }}
  vm_id {{ ansible_hostname }}
  zone {{ google_fluentd_gcp_zone }}
  {% endif %}

  # Set the chunk limit conservatively to avoid exceeding the recommended
  # chunk size of 5MB per write request.
  buffer_chunk_limit 1M
  # Flush logs every 5 seconds, even if the buffer is not full.
  flush_interval 5s
  # Never wait longer than 5 minutes between retries.
  max_retry_wait 300
  # Disable the limit on the number of retries (retry forever).
  disable_retry_limit
  # Use multiple threads for processing.
  num_threads 8
  # Use the gRPC transport.
  use_grpc true
  # If a request is a mix of valid log entries and invalid ones, ingest the
  # valid ones and drop the invalid ones instead of dropping everything.
  partial_success true
  # Enable monitoring via Prometheus integration.
  enable_monitoring true
  monitoring_type prometheus
</match>